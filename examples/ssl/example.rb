module OpenSSL
  module Example
    module_function

    def get_key_and_cert(key_path, cert_path)
      if key_path && cert_path
        rsa = PKey::RSA.new(File.open(key_path).read)
        cert = X509::Certificate.new(File.open(cert_path).read)
      else
        # we are going to create a self-signed certificate.
        rsa = PKey::RSA.new(512){|p, n|
          case p
          when 0; putc "."  # BN_generate_prime
          when 1; putc "+"  # BN_generate_prime
          when 2; putc "*"  # searching good prime, n = #of try,
                            # but also data from BN_generate_prime
          when 3; putc "\n" # found good prime, n==0 - p, n==1 - q,
                            # but also data from BN_generate_prime
          else;   putc "*"  # BN_generate_prime
          end
        }

        cert = X509::Certificate.new
        cert.version = 2
        cert.serial = 0
        name = X509::Name.new([["CN","Test"],["O","OSSL"],["C","JP"]])
        cert.subject = name
        cert.issuer = name
        cert.not_before = Time.now
        cert.not_after = Time.now + (365*24*60*60)
        cert.public_key = rsa.public_key
        ef = X509::ExtensionFactory.new(nil,cert)
        cert.extensions = [
          ef.create_extension("basicConstraints","CA:FALSE"),
          ef.create_extension("subjectKeyIdentifier", "hash")
        ]
        ef.issuer_certificate = cert
        cert.add_extension ef.create_extension("authorityKeyIdentifier",
                                               "keyid:always,issuer:always")
        cert.add_extension ef.create_extension("nsComment",
                                               "Generated by OpenSSL for Ruby!")
        cert.sign(rsa, Digest::SHA1.new)
      end
      [ rsa, cert ]
    end

    def get_verify_cb(want_verify)
      Proc.new{|ok, x509_store_ctx|
        code  = x509_store_ctx.verify_status
        msg   = x509_store_ctx.verify_message
        depth = x509_store_ctx.verify_depth
        x509  = x509_store_ctx.cert

        STDERR.puts "------verify callback start------"
        STDERR.puts "ok,code,depth = #{ok},#{code}:#{msg},#{depth}"
        STDERR.puts "x509 = \n#{x509.to_pem}"
        STDERR.puts "-------verify callback end-------"
        if want_verify && !ok
          STDERR.print "Couldn't verify peer. Do you want to progerss? [y]: "
          unless /^n/i =~ STDIN.gets() # get answer
            ok = true
          end
        end
        ok
      }
    end

  end    # end of Example
end
