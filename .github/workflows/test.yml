name: CI

on: [push, pull_request]

jobs:
  ruby-versions:
    uses: ruby/actions/.github/workflows/ruby_versions.yml@master
    with:
      engine: cruby-truffleruby
      min_version: 2.7

  test:
    needs: ruby-versions
    name: >-
      ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # ubuntu-22.04 uses OpenSSL 3.0, ubuntu-20.04 uses OpenSSL 1.1.1
        os: [ ubuntu-22.04, ubuntu-20.04, macos-latest, windows-latest ]
        ruby: ${{ fromJson(needs.ruby-versions.outputs.versions) }}
        exclude:
          - { os: windows-latest, ruby: truffleruby }
          - { os: windows-latest, ruby: truffleruby-head }
        include:
          - { os: windows-latest, ruby: ucrt }
          - { os: windows-latest, ruby: mswin }

    steps:
      - name: repo checkout
        uses: actions/checkout@v4

      - name: load ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # `bundle install` and cache

      # Enable the verbose option in mkmf.rb to print the compiling commands.
      - name: enable mkmf verbose
        run:  echo "MAKEFLAGS=V=1" >> $GITHUB_ENV
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - name: set flags to check compiler warnings
        run:  echo "RUBY_OPENSSL_EXTCFLAGS=-Werror" >> $GITHUB_ENV
        if: ${{ !matrix.skip-warnings }}

      - name: rake compile
        run:  bundle exec rake compile

      - name: rake test
        run:  bundle exec rake test TESTOPTS="-v --no-show-detail-immediately"
        timeout-minutes: 5

  test-openssls:
    name: >-
      ${{ matrix.openssl }} ${{ matrix.name-extra }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name-extra: [ '' ]
        openssl:
          # https://openssl-library.org/source/
          - openssl-1.1.1w # EOL 2023-09-11, still used by RHEL 8 and Ubuntu 20.04
          - openssl-3.0.15 # Supported until 2026-09-07
          - openssl-3.1.7 # Supported until 2025-03-14
          - openssl-3.2.3 # Supported until 2025-11-23
          - openssl-3.3.2 # Supported until 2026-04-09
          - openssl-3.4.0 # Supported until 2026-10-22
          - openssl-master
          # http://www.libressl.org/releases.html
          - libressl-3.9.2 # Supported until 2025-04-05
          - libressl-4.0.0 # Supported until 2025-10-08
        include:
          - { name-extra: 'with fips provider', openssl: openssl-3.0.15, fips-enabled: true }
          - { name-extra: 'with fips provider', openssl: openssl-3.1.7, fips-enabled: true }
          - { name-extra: 'with fips provider', openssl: openssl-3.2.3, fips-enabled: true }
          - { name-extra: 'with fips provider', openssl: openssl-3.3.2, fips-enabled: true }
          - { name-extra: 'with fips provider', openssl: openssl-3.4.0, fips-enabled: true }
          - { name-extra: 'with fips provider', openssl: openssl-master, fips-enabled: true }
          - { name-extra: 'without legacy provider', openssl: openssl-3.4.0, append-configure: 'no-legacy' }
    steps:
      - name: repo checkout
        uses: actions/checkout@v4

      - id: cache-openssl
        uses: actions/cache@v4
        with:
          path: ~/openssl
          key: openssl-${{ runner.os }}-${{ matrix.openssl }}-${{ matrix.append-configure || 'default' }}
        if: matrix.openssl != 'openssl-master' && matrix.openssl != 'libressl-master'

      - name: Compile OpenSSL library
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          # Enable Bash debugging option temporarily for debugging use.
          set -x
          mkdir -p tmp/build-openssl && cd tmp/build-openssl
          case ${{ matrix.openssl }} in
          openssl-1.*)
            OPENSSL_COMMIT=$(echo ${{ matrix.openssl }} | sed -e 's/^openssl-/OpenSSL_/' | sed -e 's/\./_/g')
            git clone -b $OPENSSL_COMMIT --depth 1 https://github.com/openssl/openssl.git .
            echo "Git commit: $(git rev-parse HEAD)"
            # shared is required for 1.0.x.
            ./Configure --prefix=$HOME/openssl --libdir=lib shared linux-x86_64
            make depend && make -j4 && make install_sw
            ;;
          openssl-*)
            OPENSSL_COMMIT=${{ matrix.openssl == 'openssl-master' && 'master' || matrix.openssl }}
            git clone -b $OPENSSL_COMMIT --depth 1 https://github.com/openssl/openssl.git .
            echo "Git commit: $(git rev-parse HEAD)"
            ./Configure --prefix=$HOME/openssl --libdir=lib enable-fips ${{ matrix.append-configure }}
            make -j4 && make install_sw && make install_fips
            ;;
          libressl-*)
            curl -L https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${{ matrix.openssl }}.tar.gz | \
              tar xzf - --strip-components=1
            ./configure --prefix=$HOME/openssl
            make -j4 && make install
            ;;
          *)
            false
            ;;
          esac

      - name: load ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: enable mkmf verbose
        run:  echo "MAKEFLAGS=V=1" >> $GITHUB_ENV

      - name: set flags to check compiler warnings
        run:  echo "RUBY_OPENSSL_EXTCFLAGS=-Werror" >> $GITHUB_ENV
        if: ${{ !matrix.skip-warnings }}

      - name: rake compile
        run:  bundle exec rake compile -- --with-openssl-dir=$HOME/openssl

      - name: setup OpenSSL config file for fips
        run: |
          sed -e "s|OPENSSL_DIR|$HOME/openssl|" tool/openssl_fips.cnf.tmpl > tmp/openssl_fips.cnf
          echo "OPENSSL_CONF=$(pwd)/tmp/openssl_fips.cnf" >> $GITHUB_ENV
        if: matrix.fips-enabled

      - name: rake test
        run:  bundle exec rake test TESTOPTS="-v --no-show-detail-immediately"
        timeout-minutes: 5
        if: ${{ !matrix.fips-enabled }}

      # Run only the passing tests on the FIPS module as a temporary workaround.
      # TODO Fix other tests, and run all the tests on FIPS module.
      - name: rake test_fips
        run:  bundle exec rake test_fips TESTOPTS="-v --no-show-detail-immediately"
        timeout-minutes: 5
        if: matrix.fips-enabled
